using Xunit;

namespace TransparentValueObjects.Tests.ValueObjectIncrementalSourceGeneratorTests;

public class DefaultWithGuid
{
    private const string Input =
"""
namespace TestNamespace;

[TransparentValueObjects.Generated.ValueObject<System.Guid>]
public readonly partial struct GuidValueObject { }
""";

    private const string Output =
"""
// <auto-generated/>
#nullable enable
namespace TestNamespace;

[global::System.Diagnostics.DebuggerDisplay("{Value}")]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = "Auto-generated.")]
readonly partial struct GuidValueObject :
	global::TransparentValueObjects.Augments.IValueObject<global::System.Guid>,
	global::System.IEquatable<GuidValueObject>,
	global::System.IEquatable<global::System.Guid>,
	global::System.IComparable<GuidValueObject>
{
	public readonly global::System.Guid Value;

    public static global::System.Type InnerValueType => typeof(global::System.Guid);

	[global::System.Obsolete($"Use GuidValueObject.{nameof(From)} instead.", error: true)]
	public GuidValueObject()
	{
		throw new global::System.InvalidOperationException($"Use GuidValueObject.{nameof(From)} instead.");
	}

	private GuidValueObject(global::System.Guid value)
	{
		Value = value;
	}

	public static GuidValueObject From(global::System.Guid value) => new(value);

	public override int GetHashCode() => Value.GetHashCode();

	public override string ToString() => Value.ToString();

	public bool Equals(GuidValueObject other) => Equals(other.Value);
	public bool Equals(global::System.Guid other) => Value.Equals(other);
	public bool Equals(GuidValueObject other, global::System.Collections.Generic.IEqualityComparer<global::System.Guid> comparer) => comparer.Equals(Value, other.Value);
	public override bool Equals(object? obj)
	{
		if (obj is null) return false;
		if (obj is GuidValueObject value) return Equals(value);
		if (obj is global::System.Guid innerValue) return Equals(innerValue);
		return false;
	}

	public static bool operator ==(GuidValueObject left, GuidValueObject right) => left.Equals(right);
	public static bool operator !=(GuidValueObject left, GuidValueObject right) => !left.Equals(right);

	public static bool operator ==(GuidValueObject left, global::System.Guid right) => left.Equals(right);
	public static bool operator !=(GuidValueObject left, global::System.Guid right) => !left.Equals(right);

	public static bool operator ==(global::System.Guid left, GuidValueObject right) => right.Equals(left);
	public static bool operator !=(global::System.Guid left, GuidValueObject right) => !right.Equals(left);

	public static explicit operator GuidValueObject(global::System.Guid value) => From(value);
	public static explicit operator global::System.Guid(GuidValueObject value) => value.Value;

    public global::System.Int32 CompareTo(GuidValueObject other) => Value.CompareTo(other);
    public static bool operator <(GuidValueObject left, GuidValueObject right) => left.Value.CompareTo(right.Value) < 0;
    public static bool operator >(GuidValueObject left, GuidValueObject right) => left.Value.CompareTo(right.Value) > 0;
    public static bool operator <=(GuidValueObject left, GuidValueObject right) => left.Value.CompareTo(right.Value) <= 0;
    public static bool operator >=(GuidValueObject left, GuidValueObject right) => left.Value.CompareTo(right.Value) >= 0;

    public static bool operator <(global::System.Guid left, GuidValueObject right) => left.CompareTo(right.Value) < 0;
    public static bool operator >(global::System.Guid left, GuidValueObject right) => left.CompareTo(right.Value) > 0;
    public static bool operator <=(global::System.Guid left, GuidValueObject right) => left.CompareTo(right.Value) <= 0;
    public static bool operator >=(global::System.Guid left, GuidValueObject right) => left.CompareTo(right.Value) >= 0;

    public static bool operator <(GuidValueObject left, global::System.Guid right) => left.Value.CompareTo(right) < 0;
    public static bool operator >(GuidValueObject left, global::System.Guid right) => left.Value.CompareTo(right) > 0;
    public static bool operator <=(GuidValueObject left, global::System.Guid right) => left.Value.CompareTo(right) <= 0;
    public static bool operator >=(GuidValueObject left, global::System.Guid right) => left.Value.CompareTo(right) >= 0;

	public static GuidValueObject NewId() => From(global::System.Guid.NewGuid());

}
""";

    [Fact]
    public void TestGenerator()
    {
        TestHelpers.TestGenerator(Input, "GuidValueObject.g.cs", Output);
    }
}
