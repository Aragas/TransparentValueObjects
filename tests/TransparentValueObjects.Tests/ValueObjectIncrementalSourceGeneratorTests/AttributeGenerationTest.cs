using System;
using System.Linq;
using FluentAssertions;
using Microsoft.CodeAnalysis;
using Xunit;

namespace TransparentValueObjects.Tests.ValueObjectIncrementalSourceGeneratorTests;

public class AttributeGenerationTest
{
    private const string Output =
"""
// <auto-generated/>

namespace TransparentValueObjects.Generated
{
	[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = "Auto-generated")]
	[global::System.AttributeUsage(global::System.AttributeTargets.Struct)]
	public class ValueObjectAttribute<T> : global::System.Attribute { }
}
""";

    [Fact]
    public void TestAttributeExists()
    {
        var (driver, compilation) = TestHelpers.SetupGenerator(Array.Empty<SyntaxTree>());

        var runResult = driver.RunGenerators(compilation).GetRunResult();
        var generated = runResult.GeneratedTrees.FirstOrDefault(t => t.FilePath.EndsWith("ValueObjectAttribute.g.cs"));
        generated.Should().NotBeNull();

        TestHelpers.NormalizeEquals(generated!.GetText().ToString(), Output);
    }
}
