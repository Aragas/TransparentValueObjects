using System.Linq;
using System.Text;
using FluentAssertions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using TransparentValueObjects.Augments;
using Xunit;

namespace TransparentValueObjects.Tests;

public class ValueObjectIncrementalSourceGeneratorTests
{
    private const string Input =
"""
namespace TestNamespace;

[TransparentValueObjects.Generated.ValueObject<string>]
public readonly partial struct SampleValueObject : TransparentValueObjects.Augments.IHasDefaultValue<SampleValueObject>
{
    public static SampleValueObject GetDefaultValue() => From("Hello World!");
}
""";

    private const string Output =
"""
// <auto-generated/>
namespace TestNamespace;

[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = "Auto-generated.")]
readonly partial struct SampleValueObject :
    global::TransparentValueObjects.Augments.IValueObject<SampleValueObject, global::System.String>,
	global::System.IEquatable<SampleValueObject>,
	global::System.IEquatable<global::System.String>
{
	public readonly global::System.String Value;

    public SampleValueObject()
    {
        Value = GetDefaultValue().Value;
    }

	private SampleValueObject(global::System.String value)
	{
		Value = value;
	}

	public static SampleValueObject From(global::System.String value) => new(value);

	public override int GetHashCode() => Value.GetHashCode();

	public override string ToString() => Value.ToString();

	public bool Equals(SampleValueObject other) => Value.Equals(other.Value);
	public bool Equals(global::System.String? other) => Value.Equals(other);
	public bool Equals(SampleValueObject other, global::System.Collections.Generic.IEqualityComparer<global::System.String> comparer) => comparer.Equals(Value, other.Value);
	public override bool Equals(object? obj)
	{
		if (obj is null) return false;
		if (obj is SampleValueObject value) return Equals(value);
		if (obj is global::System.String innerValue) return Equals(innerValue);
		return false;
	}

	public static bool operator ==(SampleValueObject left, SampleValueObject right) => left.Equals(right);
	public static bool operator !=(SampleValueObject left, SampleValueObject right) => !left.Equals(right);

	public static bool operator ==(SampleValueObject left, global::System.String right) => left.Equals(right);
	public static bool operator !=(SampleValueObject left, global::System.String right) => !left.Equals(right);

	public static bool operator ==(global::System.String left, SampleValueObject right) => right.Equals(left);
	public static bool operator !=(global::System.String left, SampleValueObject right) => !right.Equals(left);

	public static explicit operator SampleValueObject(global::System.String value) => From(value);
	public static explicit operator global::System.String(SampleValueObject value) => value.Value;

}
""";

    [Fact]
    public void TestGenerator()
    {
        var generator = new ValueObjectIncrementalSourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);

        var compilation = CSharpCompilation.Create(nameof(ValueObjectIncrementalSourceGeneratorTests),
            new[] { CSharpSyntaxTree.ParseText(Input) },
            new[]
            {
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),

                // augments
                MetadataReference.CreateFromFile(typeof(Marker).Assembly.Location)
            });

        var runResult = driver.RunGenerators(compilation).GetRunResult();

        var generated = runResult.GeneratedTrees.FirstOrDefault(t => t.FilePath.EndsWith("SampleValueObject.g.cs"));
        generated.Should().NotBeNull();

        var text = Normalize(generated!.GetText().ToString());
        text.Should().Be(Normalize(Output));
    }

    private static string Normalize(string input)
    {
        var sb = new StringBuilder(input);
        sb.Replace("    ", "\t");
        return sb.ToString().Trim();
    }
}
