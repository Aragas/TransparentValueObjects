using System.Linq;
using System.Text;
using FluentAssertions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace TransparentValueObjects.Tests;

public class ValueObjectIncrementalSourceGeneratorTests
{
    private const string Input =
"""
namespace TestNamespace;

[TransparentValueObjects.Generated.ValueObject<string>]
public readonly partial struct SampleValueObject { }
""";

    private const string Output =
"""
// <auto-generated/>
namespace TestNamespace;
readonly partial struct SampleValueObject
{
    public readonly global::System.String Value;
    [global::System.Obsolete($"Use SampleValueObject.{nameof(From)} instead.", error: true)]
    public SampleValueObject()
    {
        throw new global::System.InvalidOperationException($"Use SampleValueObject.{nameof(From)} instead.");
    }
    private SampleValueObject(global::System.String value)
    {
        Value = value;
    }
    public static SampleValueObject From(global::System.String value) => new(value);
}
""";

    [Fact]
    public void TestGenerator()
    {
        var generator = new ValueObjectIncrementalSourceGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);

        var compilation = CSharpCompilation.Create(nameof(ValueObjectIncrementalSourceGeneratorTests),
            new[] { CSharpSyntaxTree.ParseText(Input) },
            new[]
            {
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            });

        var runResult = driver.RunGenerators(compilation).GetRunResult();

        var generated = runResult.GeneratedTrees.FirstOrDefault(t => t.FilePath.EndsWith("SampleValueObject.g.cs"));
        generated.Should().NotBeNull();

        var text = Normalize(generated!.GetText().ToString());
        text.Should().Be(Normalize(Output));
    }

    private static string Normalize(string input)
    {
        var sb = new StringBuilder(input);
        sb.Replace("    ", "\t");
        return sb.ToString().Trim();
    }
}
